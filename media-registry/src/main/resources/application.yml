server:
  port: 8520

#spring:
#  security:
#    basic:
#      enabled: true
#    user:
#      name: admin
#      password: 123456


eureka:
  instance:
    hostname: localhost
    #发呆时间，即服务续约到期时间（缺省为90s）
    #leaseExpirationDurationInSeconds表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance
    #如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了
    #如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉
    #该值至少应该大于leaseRenewalIntervalInSeconds
    lease-expiration-duration-in-seconds: 10
    #心跳时间，即服务续约间隔时间（缺省为30s）
    #leaseRenewalIntervalInSeconds，表示eureka client发送心跳给server端的频率
    #如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance
    #如果该instance实现了HealthCheckCallback，并决定让自己unavailable的话，则该instance也不会接收到流量
    lease-renewal-interval-in-seconds: 5
  server:
    #是否开启自我保护模式，默认为true
    #默认情况下，如果Eureka Server在一定时间内没有接收到某个微服务实例的心跳，Eureka Server将会注销该实例（默认90秒）
    #但是当网络分区故障发生时，微服务与Eureka Server之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务
    enable-self-preservation: false
    use-read-only-response-cache: false
    #清理无效节点的时间间隔，默认60000毫秒，即60秒
    eviction-interval-timer-in-ms: 5000
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
    #表示eureka client间隔多久去拉取服务注册信息，默认为30秒，对于api-gateway，如果要迅速获取服务注册状态，可以缩小该值，比如5秒
    registry-fetch-interval-seconds: 30

logging:
  level:
    com.netflix: warn

